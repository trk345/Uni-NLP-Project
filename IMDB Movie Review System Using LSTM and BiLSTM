from google.colab import drive
drive.mount('/content/drive')
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras import layers
from keras.backend import clear_session

# imdb_path = '/content/IMDB Dataset.csv'
imdb_path = '/content/drive/MyDrive/Colab Notebooks/CSE440/IMDB Dataset.csv'
df = pd.read_csv(imdb_path)
# df.shape
df.head()

# X = df.drop(columns = ['sentiment'], axis = 1)  #cant use this since it returns a df, tokenizer requires list
X = df['review'].values #this returns a list
Y = df['sentiment'].values
# print(X)
sentences_train, sentences_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state = 35)
# sentences_train = np.array(sentences_train)
# print(type(sentences_train))

print(sentences_train)

# vectorizer = CountVectorizer()
# vectorizer.fit(sentences_train)

# X_train = vectorizer.transform(sentences_train)
# X_test  = vectorizer.transform(sentences_test)

tokenizer = Tokenizer()
tokenizer.fit_on_texts(sentences_train)
# sentences_train = np.array(sentences_train)
X_train = tokenizer.texts_to_sequences(sentences_train)
X_test = tokenizer.texts_to_sequences(sentences_test)

# print(X_train)
# print(X_test)
# print(Y_train)
print(Y_test)

vocab_size = len(tokenizer.word_index) + 1  # Adding 1 because of reserved 0 index
print(vocab_size)
maxlen = 256

X_train_pad = pad_sequences(X_train, padding='post', maxlen=maxlen)
X_test_pad = pad_sequences(X_test, padding='post', maxlen=maxlen)
# X_train_np = np.array(X_train_padded)
# X_test_np = np.array(X_test_padded)
Y_train_num = np.array([1 if label == 'positive' else 0 for label in Y_train])
Y_test_num = np.array([1 if label == 'positive' else 0 for label in Y_test])
Y_train = Y_train_num.reshape(-1, 1)
Y_test = Y_test_num.reshape(-1, 1)

# label_mapping = {'negative': 0, 'positive': 1}
# Y_train = Y_train.map(label_mapping).values
# Y_test = Y_test.map(label_mapping).values
# Y_train_np = np.array(Y_train)
# Y_train_np = Y_train.astype(int)
# Y_test_np = Y_test.astype(int)
# print(sentences_train[2])
# print(X_train_np)
# print(Y_train_np.dtype)

def create_embedding_matrix(filepath, word_index, embedding_dim):
    vocab_size = len(word_index) + 1  # Adding again 1 because of reserved 0 index
    embedding_matrix = np.zeros((vocab_size, embedding_dim))

    with open(filepath) as f:
        for line in f:
            word, *vector = line.split()
            if word in word_index:
                idx = word_index[word]
                embedding_matrix[idx] = np.array(vector, dtype=np.float32)[:embedding_dim]

    return embedding_matrix

embedding_dim = 100
embedding_matrix = create_embedding_matrix('/content/drive/MyDrive/Colab Notebooks/CSE440/glove.6B.100d.txt',tokenizer.word_index, embedding_dim)
print(embedding_matrix)
vocab_size = len(tokenizer.word_index) + 1
nonzero_elements = np.count_nonzero(np.count_nonzero(embedding_matrix, axis=1))
print(nonzero_elements / vocab_size)
#0.6277030819812355

def plot_history(history):
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    x = range(1, len(acc) + 1)
    lb = '#7ce1fa'
    o = '#fe9422'

    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.plot(x, acc, lb, label='Training acc')
    plt.plot(x, val_acc, o, label='Validation acc')
    plt.title('Training and validation accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(x, loss, lb, label='Training loss')
    plt.plot(x, val_loss, o, label='Validation loss')
    plt.title('Training and validation loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

model1 = Sequential()
model1.add(layers.Embedding(input_dim=vocab_size, weights=[embedding_matrix], output_dim=embedding_dim, input_length=maxlen))
# model.add(layers.Flatten())
model1.add(layers.Dense(10, activation='relu'))
model1.add(layers.Dense(1, activation='sigmoid'))
model1.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model1.summary()

shallow = model1.fit(X_train_pad, Y_train, epochs=20, batch_size=10, validation_data=(X_test_pad, Y_test))

loss, accuracy = model1.evaluate(X_train_pad, Y_train, verbose=False)
print("Training Accuracy:  {:.2f}%".format(accuracy*100))
loss, accuracy = model1.evaluate(X_test_pad, Y_test, verbose=False)
print("Testing Accuracy:  {:.2f}%".format(accuracy*100))
print("Testing Loss:  {:.4f}".format(loss))

plot_history(shallow)
clear_session()

#FOR SHALLOW
# batch_size=10, shuffle = False, accuracy_reached = 0.5761, training_acc from model.eval = 0.5652, testing_acc from model.eval = 0.5575
# batch_size=5, shuffle = False, accuracy_reached = 0.5794, training_acc from model.eval = 0.5632, testing_acc from model.eval = 0.5545
# batch_size=5, shuffle = True, accuracy_reached = 0.5715, training_acc from model.eval = 0.5728, testing_acc from model.eval = 0.5605

model2 = Sequential()
model2.add(layers.Embedding(input_dim=vocab_size, weights=[embedding_matrix], output_dim=embedding_dim, input_length=maxlen))
model2.add(layers.LSTM(10))
model2.add(layers.Dense(1, activation='sigmoid'))
model2.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model2.summary()

uni_LSTM = model2.fit(X_train_pad, Y_train, epochs=20, batch_size=10, validation_data=(X_test_pad, Y_test))

loss, accuracy = model2.evaluate(X_train_pad, Y_train, verbose=False)
print("Training Accuracy:  {:.2f}%".format(accuracy*100))
loss, accuracy = model2.evaluate(X_test_pad, Y_test, verbose=False)
print("Testing Accuracy:  {:.2f}%".format(accuracy*100))
print("Testing Loss:  {:.4f}".format(loss))

plot_history(uni_LSTM)
clear_session()

model3 = Sequential()
model3.add(layers.Embedding(input_dim=vocab_size, weights=[embedding_matrix], output_dim=embedding_dim, input_length=maxlen))
model3.add(layers.Bidirectional(layers.LSTM(10)))
model3.add(layers.Dense(1, activation='sigmoid'))
model3.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model3.summary()

bi_LSTM = model3.fit(X_train_pad, Y_train, epochs=20, batch_size=10, validation_data=(X_test_pad, Y_test))

loss, accuracy = model3.evaluate(X_train_pad, Y_train, verbose=False)
print("Training Accuracy:  {:.2f}%".format(accuracy*100))
loss, accuracy = model3.evaluate(X_test_pad, Y_test, verbose=False)
print("Testing Accuracy:  {:.2f}%".format(accuracy*100))
print("Testing Loss:  {:.4f}".format(loss))

plot_history(bi_LSTM)
clear_session()
